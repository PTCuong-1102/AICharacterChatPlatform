name: .NET Build, Pack and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            output_name: AICharacterChat-win-x64
          - os: ubuntu-latest
            rid: linux-x64
            output_name: AICharacterChat-linux-x64
          - os: macos-latest
            rid: osx-x64
            output_name: AICharacterChat-osx-x64
          - os: macos-latest
            rid: osx-arm64
            output_name: AICharacterChat-osx-arm64
            
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Add RuntimeIdentifiers to project files (Windows)
      if: runner.os == 'Windows'
      run: |
        if (!(Select-String -Path "AICharacterChat.UI/AICharacterChat.UI.csproj" -Pattern "RuntimeIdentifiers")) {
          (Get-Content "AICharacterChat.UI/AICharacterChat.UI.csproj") -replace "</PropertyGroup>", "    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64;osx-arm64</RuntimeIdentifiers>`n  </PropertyGroup>" | Set-Content "AICharacterChat.UI/AICharacterChat.UI.csproj"
        }
        if (!(Select-String -Path "AICharacterChat.Data/AICharacterChat.Data.csproj" -Pattern "RuntimeIdentifiers")) {
          (Get-Content "AICharacterChat.Data/AICharacterChat.Data.csproj") -replace "</PropertyGroup>", "    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64;osx-arm64</RuntimeIdentifiers>`n  </PropertyGroup>" | Set-Content "AICharacterChat.Data/AICharacterChat.Data.csproj"
        }
        if (!(Select-String -Path "AICharacterChat.Business/AICharacterChat.Business.csproj" -Pattern "RuntimeIdentifiers")) {
          (Get-Content "AICharacterChat.Business/AICharacterChat.Business.csproj") -replace "</PropertyGroup>", "    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64;osx-arm64</RuntimeIdentifiers>`n  </PropertyGroup>" | Set-Content "AICharacterChat.Business/AICharacterChat.Business.csproj"
        }
      shell: pwsh

    - name: Add RuntimeIdentifiers to project files (Unix)
      if: runner.os != 'Windows'
      run: |
        if ! grep -q "RuntimeIdentifiers" AICharacterChat.UI/AICharacterChat.UI.csproj; then
          sed -i.bak 's|</PropertyGroup>|    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64;osx-arm64</RuntimeIdentifiers>\
  </PropertyGroup>|' AICharacterChat.UI/AICharacterChat.UI.csproj
        fi
        if ! grep -q "RuntimeIdentifiers" AICharacterChat.Data/AICharacterChat.Data.csproj; then
          sed -i.bak 's|</PropertyGroup>|    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64;osx-arm64</RuntimeIdentifiers>\
  </PropertyGroup>|' AICharacterChat.Data/AICharacterChat.Data.csproj
        fi
        if ! grep -q "RuntimeIdentifiers" AICharacterChat.Business/AICharacterChat.Business.csproj; then
          sed -i.bak 's|</PropertyGroup>|    <RuntimeIdentifiers>win-x64;linux-x64;osx-x64;osx-arm64</RuntimeIdentifiers>\
  </PropertyGroup>|' AICharacterChat.Business/AICharacterChat.Business.csproj
        fi

    - name: Create appsettings.json
      run: |
        echo '{
          "GeminiApi": {
            "ApiKey": "${{ secrets.GEMINI_API_KEY }}",
            "ApiUrl": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"
          },
          "ConnectionStrings": {
            "DefaultConnection": "Data Source=chat_database.db"
          }
        }' > AICharacterChat.UI/appsettings.json
      shell: bash

    - name: Restore dependencies
      run: dotnet restore AICharacterChatPlatform.sln

    - name: Publish Application
      run: dotnet publish AICharacterChat.UI/AICharacterChat.UI.csproj --configuration Release --runtime ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=true -o ./publish/${{ matrix.output_name }}

    - name: Archive production artifacts (Windows)
      if: runner.os == 'Windows'
      run: Compress-Archive -Path ./publish/${{ matrix.output_name }}/* -DestinationPath ./publish/${{ matrix.output_name }}.zip

    - name: Archive production artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      run: tar -czvf ./publish/${{ matrix.output_name }}.tar.gz -C ./publish/${{ matrix.output_name }}/ .
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output_name }}
        path: ./publish/${{ matrix.output_name }}.*

  create-release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.sha }}
          draft: true
          generate_release_notes: true
          files: |
            artifacts/AICharacterChat-win-x64/*.zip
            artifacts/AICharacterChat-linux-x64/*.tar.gz
            artifacts/AICharacterChat-osx-x64/*.tar.gz
            artifacts/AICharacterChat-osx-arm64/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
